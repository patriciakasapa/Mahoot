import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
/**
 * Protocol modes supported by MSAL.
 */
export var ProtocolMode;
(function (ProtocolMode) {
    ProtocolMode["AAD"] = "AAD";
    ProtocolMode["OIDC"] = "OIDC";
})(ProtocolMode || (ProtocolMode = {}));
const COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';
const defaultOptions = {
    redirect_uri: location.origin,
    authority: COMMON_AUTHORITY,
    scopes: ['openid', 'profile', 'User.Read'],
    knownAuthorities: [],
    protocolMode: ProtocolMode.AAD,
    clientCapabilities: [],
    cacheLocation: 'sessionStorage'
};
/**
 * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser
 */
export class MicrosoftLoginProvider extends BaseLoginProvider {
    constructor(clientId, initOptions = defaultOptions) {
        super();
        this.clientId = clientId;
        this.initOptions = initOptions;
    }
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.1.0/js/msal-browser.js', () => {
                var _a, _b, _c, _d, _e, _f;
                try {
                    const config = {
                        auth: {
                            clientId: this.clientId,
                            redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : defaultOptions.redirect_uri,
                            authority: (_b = this.initOptions.authority) !== null && _b !== void 0 ? _b : defaultOptions.authority,
                            knownAuthorities: (_c = this.initOptions.knownAuthorities) !== null && _c !== void 0 ? _c : defaultOptions.knownAuthorities,
                            protocolMode: (_d = this.initOptions.protocolMode) !== null && _d !== void 0 ? _d : defaultOptions.protocolMode,
                            clientCapabilities: (_e = this.initOptions.clientCapabilities) !== null && _e !== void 0 ? _e : defaultOptions.clientCapabilities
                        },
                        cache: !this.initOptions.cacheLocation ? null : {
                            cacheLocation: (_f = this.initOptions.cacheLocation) !== null && _f !== void 0 ? _f : defaultOptions.cacheLocation
                        }
                    };
                    this._instance = new msal.PublicClientApplication(config);
                    resolve();
                }
                catch (e) {
                    reject(e);
                }
            });
        });
    }
    getSocialUser(loginResponse) {
        return new Promise((resolve, reject) => {
            //After login, use Microsoft Graph API to get user info
            let meRequest = new XMLHttpRequest();
            meRequest.onreadystatechange = () => {
                if (meRequest.readyState == 4) {
                    try {
                        if (meRequest.status == 200) {
                            let userInfo = JSON.parse(meRequest.responseText);
                            let user = new SocialUser();
                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;
                            user.id = loginResponse.idToken;
                            user.name = loginResponse.idTokenClaims.name;
                            user.email = loginResponse.account.username;
                            user.idToken = loginResponse.idToken;
                            user.response = loginResponse;
                            user.firstName = userInfo.givenName;
                            user.lastName = userInfo.surname;
                            resolve(user);
                        }
                        else {
                            reject(`Error retrieving user info: ${meRequest.status}`);
                        }
                    }
                    catch (err) {
                        reject(err);
                    }
                }
            };
            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http
            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');
            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);
            try {
                meRequest.send();
            }
            catch (err) {
                reject(err);
            }
        });
    }
    getLoginStatus() {
        return new Promise((resolve, reject) => {
            const accounts = this._instance.getAllAccounts();
            if (accounts.length > 0) {
                try {
                    this._instance.ssoSilent({
                        scopes: this.initOptions.scopes,
                        loginHint: accounts[0].username
                    })
                        .then(loginResponse => {
                        this.getSocialUser(loginResponse)
                            .then(user => resolve(user))
                            .catch(err => reject(err));
                    })
                        .catch(err => reject(err));
                }
                catch (err) {
                    reject(err);
                }
            }
            else {
                reject(`No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`);
            }
        });
    }
    signIn() {
        return new Promise((resolve, reject) => {
            try {
                this._instance.loginPopup({
                    scopes: this.initOptions.scopes
                })
                    .then(loginResponse => {
                    this.getSocialUser(loginResponse)
                        .then(user => resolve(user))
                        .catch(err => reject(err));
                })
                    .catch(err => reject(err));
            }
            catch (err) {
                reject(err);
            }
        });
    }
    signOut(revoke) {
        return new Promise((resolve, reject) => {
            try {
                const accounts = this._instance.getAllAccounts();
                //TODO: This redirects to a Microsoft page, then sends us back to redirect_uri... this doesn't seem to match other providers
                //Open issues:
                // https://github.com/abacritt/angularx-social-login/issues/306
                // https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/2563
                this._instance.logout({
                    account: accounts[0],
                    postLogoutRedirectUri: this.initOptions.redirect_uri
                })
                    .then(() => {
                    resolve();
                })
                    .catch(err => {
                    reject(err);
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
}
MicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWljcm9zb2Z0LWxvZ2luLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL0pBRFVUVEEvZGV2L3dlYi9hbmd1bGFyeC1zb2NpYWwtbG9naW4vcHJvamVjdHMvbGliL3NyYy8iLCJzb3VyY2VzIjpbInByb3ZpZGVycy9taWNyb3NvZnQtbG9naW4tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXJEOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksWUFHWDtBQUhELFdBQVksWUFBWTtJQUN0QiwyQkFBVyxDQUFBO0lBQ1gsNkJBQWEsQ0FBQTtBQUNmLENBQUMsRUFIVyxZQUFZLEtBQVosWUFBWSxRQUd2QjtBQStFRCxNQUFNLGdCQUFnQixHQUFXLDJDQUEyQyxDQUFDO0FBRTdFLE1BQU0sY0FBYyxHQUFzQjtJQUN4QyxZQUFZLEVBQUUsUUFBUSxDQUFDLE1BQU07SUFDN0IsU0FBUyxFQUFFLGdCQUFnQjtJQUMzQixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQztJQUMxQyxnQkFBZ0IsRUFBRSxFQUFFO0lBQ3BCLFlBQVksRUFBRSxZQUFZLENBQUMsR0FBRztJQUM5QixrQkFBa0IsRUFBRSxFQUFFO0lBQ3RCLGFBQWEsRUFBRSxnQkFBZ0I7Q0FDaEMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGlCQUFpQjtJQUkzRCxZQUNVLFFBQWdCLEVBQ2hCLGNBQWdDLGNBQWM7UUFFdEQsS0FBSyxFQUFFLENBQUM7UUFIQSxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVyxDQUFtQztJQUd4RCxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUs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QUFTLENBQUMsTUFBTSxDQUFDO29CQUNwQixPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDcEIscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZO2lCQUNyRCxDQUFDO3FCQUNDLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ1QsT0FBTyxFQUFFLENBQUM7Z0JBQ1osQ0FBQyxDQUFDO3FCQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDWCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2QsQ0FBQyxDQUFDLENBQUM7YUFDTjtZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNaLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQWpKc0Isa0NBQVcsR0FBVyxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTG9naW5Qcm92aWRlciB9IGZyb20gJy4uL2VudGl0aWVzL2Jhc2UtbG9naW4tcHJvdmlkZXInO1xyXG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi4vZW50aXRpZXMvc29jaWFsLXVzZXInO1xyXG5cclxuLyoqXHJcbiAqIFByb3RvY29sIG1vZGVzIHN1cHBvcnRlZCBieSBNU0FMLlxyXG4gKi9cclxuZXhwb3J0IGVudW0gUHJvdG9jb2xNb2RlIHtcclxuICBBQUQgPSAnQUFEJyxcclxuICBPSURDID0gJ09JREMnXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXphdGlvbiBPcHRpb25zIGZvciBNaWNyb3NvZnQgUHJvdmlkZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZUFEL21pY3Jvc29mdC1hdXRoZW50aWNhdGlvbi1saWJyYXJ5LWZvci1qcy9ibG9iL2Rldi9saWIvbXNhbC1icm93c2VyL2RvY3MvaW5pdGlhbGl6YXRpb24ubWRcclxuICogRGV0YWlscyAobm90IGFsbCBvcHRpb25zIGFyZSBzdXBwb3J0ZWQpOiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmVBRC9taWNyb3NvZnQtYXV0aGVudGljYXRpb24tbGlicmFyeS1mb3ItanMvYmxvYi9kZXYvbGliL21zYWwtYnJvd3Nlci9kb2NzL2NvbmZpZ3VyYXRpb24ubWRcclxuICovXHJcbmV4cG9ydCB0eXBlIE1pY3Jvc29mdE9wdGlvbnMgPSB7XHJcbiAgcmVkaXJlY3RfdXJpOiBzdHJpbmcsXHJcbiAgYXV0aG9yaXR5Pzogc3RyaW5nLFxyXG4gIGtub3duQXV0aG9yaXRpZXM/OiBzdHJpbmdbXSxcclxuICBwcm90b2NvbE1vZGU/OiBQcm90b2NvbE1vZGUsXHJcbiAgY2xpZW50Q2FwYWJpbGl0aWVzPzogc3RyaW5nW10sXHJcbiAgY2FjaGVMb2NhdGlvbj86IHN0cmluZyxcclxuICBzY29wZXM/OiBzdHJpbmdbXVxyXG59O1xyXG5cclxuLy8gQ29sbGVjdGlvbiBvZiBpbnRlcm5hbCBNU0FMIGludGVyZmFjZXMgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlQUQvbWljcm9zb2Z0LWF1dGhlbnRpY2F0aW9uLWxpYnJhcnktZm9yLWpzL3RyZWUvZGV2L2xpYi9tc2FsLWJyb3dzZXIvc3JjXHJcblxyXG5pbnRlcmZhY2UgTVNBTEFjY291bnQge1xyXG4gIGVudmlyb25tZW50OiBzdHJpbmc7XHJcbiAgaG9tZUFjY291bnRJZDogc3RyaW5nO1xyXG4gIHRlbmFudElkOiBzdHJpbmc7XHJcbiAgdXNlcm5hbWU6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIE1TR3JhcGhVc2VySW5mbyB7XHJcbiAgYnVzaW5lc3NQaG9uZXM6IHN0cmluZ1tdO1xyXG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XHJcbiAgZ2l2ZW5OYW1lOiBzdHJpbmc7XHJcbiAgaWQ6IHN0cmluZztcclxuICBqb2JUaXRsZTogc3RyaW5nO1xyXG4gIG1haWw6IHN0cmluZztcclxuICBtb2JpbGVQaG9uZTogc3RyaW5nO1xyXG4gIG9mZmljZUxvY2F0aW9uOiBzdHJpbmc7XHJcbiAgcHJlZmVycmVkTGFuZ3VhZ2U6IHN0cmluZztcclxuICBzdXJuYW1lOiBzdHJpbmc7XHJcbiAgdXNlclByaW5jaXBhbE5hbWU6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIE1TQUxMb2dpblJlcXVlc3Qge1xyXG4gIHNjb3Blcz86IHN0cmluZ1tdO1xyXG4gIHNpZD86IHN0cmluZztcclxuICBsb2dpbkhpbnQ/OiBzdHJpbmc7XHJcbiAgZG9tYWluSGludD86IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIE1TQUxMb2dpblJlc3BvbnNlIHtcclxuICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xyXG4gIGFjY291bnQ6IE1TQUxBY2NvdW50O1xyXG4gIGV4cGlyZXNPbjogRGF0ZTtcclxuICBleHRFeHBpcmVzT246IERhdGU7XHJcbiAgZmFtaWx5SWQ6IHN0cmluZztcclxuICBmcm9tQ2FjaGU6IGJvb2xlYW47XHJcbiAgaWRUb2tlbjogc3RyaW5nO1xyXG4gIGlkVG9rZW5DbGFpbXM6IGFueTtcclxuICBzY29wZXM6IHN0cmluZ1tdO1xyXG4gIHN0YXRlOiBzdHJpbmc7XHJcbiAgdGVuYW50SWQ6IHN0cmluZztcclxuICB1bmlxdWVJZDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTVNBTExvZ291dFJlcXVlc3Qge1xyXG4gIGFjY291bnQ/OiBNU0FMQWNjb3VudDtcclxuICBwb3N0TG9nb3V0UmVkaXJlY3RVcmk/OiBzdHJpbmc7XHJcbiAgYXV0aG9yaXR5Pzogc3RyaW5nO1xyXG4gIGNvcnJlbGF0aW9uSWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBNU0FMQ2xpZW50QXBwbGljYXRpb24ge1xyXG4gIGdldEFsbEFjY291bnRzKCk6IE1TQUxBY2NvdW50W107XHJcbiAgbG9nb3V0KGxvZ291dFJlcXVlc3Q/OiBNU0FMTG9nb3V0UmVxdWVzdCk6IFByb21pc2U8dm9pZD47XHJcbiAgbG9naW5Qb3B1cChsb2dpblJlcXVlc3Q6IE1TQUxMb2dpblJlcXVlc3QpOiBQcm9taXNlPE1TQUxMb2dpblJlc3BvbnNlPjtcclxuICBzc29TaWxlbnQobG9naW5SZXF1ZXN0OiBNU0FMTG9naW5SZXF1ZXN0KTogUHJvbWlzZTxNU0FMTG9naW5SZXNwb25zZT47XHJcbiAgYWNxdWlyZVRva2VuU2lsZW50KGxvZ2luUmVxdWVzdDogTVNBTExvZ2luUmVxdWVzdCk6IFByb21pc2U8TVNBTExvZ2luUmVzcG9uc2U+O1xyXG4gIGdldEFjY291bnRCeUhvbWVJZChob21lQWNjb3VudElkOiBzdHJpbmcpOiBNU0FMQWNjb3VudDtcclxufVxyXG5cclxuZGVjbGFyZSBsZXQgbXNhbDogYW55O1xyXG5cclxuY29uc3QgQ09NTU9OX0FVVEhPUklUWTogc3RyaW5nID0gJ2h0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbS9jb21tb24vJztcclxuXHJcbmNvbnN0IGRlZmF1bHRPcHRpb25zIDogTWljcm9zb2Z0T3B0aW9ucyA9IHtcclxuICByZWRpcmVjdF91cmk6IGxvY2F0aW9uLm9yaWdpbixcclxuICBhdXRob3JpdHk6IENPTU1PTl9BVVRIT1JJVFksXHJcbiAgc2NvcGVzOiBbJ29wZW5pZCcsICdwcm9maWxlJywgJ1VzZXIuUmVhZCddLFxyXG4gIGtub3duQXV0aG9yaXRpZXM6IFtdLFxyXG4gIHByb3RvY29sTW9kZTogUHJvdG9jb2xNb2RlLkFBRCxcclxuICBjbGllbnRDYXBhYmlsaXRpZXM6IFtdLFxyXG4gIGNhY2hlTG9jYXRpb246ICdzZXNzaW9uU3RvcmFnZSdcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaWNyb3NvZnQgQXV0aGVudGljYXRpb24gdXNpbmcgTVNBTCB2MjogaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlQUQvbWljcm9zb2Z0LWF1dGhlbnRpY2F0aW9uLWxpYnJhcnktZm9yLWpzL3RyZWUvZGV2L2xpYi9tc2FsLWJyb3dzZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNaWNyb3NvZnRMb2dpblByb3ZpZGVyIGV4dGVuZHMgQmFzZUxvZ2luUHJvdmlkZXIge1xyXG4gIHByaXZhdGUgX2luc3RhbmNlOiBNU0FMQ2xpZW50QXBwbGljYXRpb247XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBQUk9WSURFUl9JRDogc3RyaW5nID0gJ01JQ1JPU09GVCc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjbGllbnRJZDogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSBpbml0T3B0aW9uczogTWljcm9zb2Z0T3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRoaXMubG9hZFNjcmlwdChcclxuICAgICAgICBNaWNyb3NvZnRMb2dpblByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgICdodHRwczovL2FsY2RuLm1zYXV0aC5uZXQvYnJvd3Nlci8yLjEuMC9qcy9tc2FsLWJyb3dzZXIuanMnLFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICBhdXRoOiB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZCxcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB0aGlzLmluaXRPcHRpb25zLnJlZGlyZWN0X3VyaSA/PyBkZWZhdWx0T3B0aW9ucy5yZWRpcmVjdF91cmksXHJcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IHRoaXMuaW5pdE9wdGlvbnMuYXV0aG9yaXR5ID8/IGRlZmF1bHRPcHRpb25zLmF1dGhvcml0eSxcclxuICAgICAgICAgICAgICAgIGtub3duQXV0aG9yaXRpZXM6IHRoaXMuaW5pdE9wdGlvbnMua25vd25BdXRob3JpdGllcyA/PyBkZWZhdWx0T3B0aW9ucy5rbm93bkF1dGhvcml0aWVzLFxyXG4gICAgICAgICAgICAgICAgcHJvdG9jb2xNb2RlOiB0aGlzLmluaXRPcHRpb25zLnByb3RvY29sTW9kZSA/PyBkZWZhdWx0T3B0aW9ucy5wcm90b2NvbE1vZGUsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRDYXBhYmlsaXRpZXM6IHRoaXMuaW5pdE9wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzID8/IGRlZmF1bHRPcHRpb25zLmNsaWVudENhcGFiaWxpdGllc1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgY2FjaGU6ICF0aGlzLmluaXRPcHRpb25zLmNhY2hlTG9jYXRpb24gPyBudWxsIDoge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVMb2NhdGlvbjogdGhpcy5pbml0T3B0aW9ucy5jYWNoZUxvY2F0aW9uID8/IGRlZmF1bHRPcHRpb25zLmNhY2hlTG9jYXRpb25cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBtc2FsLlB1YmxpY0NsaWVudEFwcGxpY2F0aW9uKGNvbmZpZyk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRTb2NpYWxVc2VyKGxvZ2luUmVzcG9uc2UpOiBQcm9taXNlPFNvY2lhbFVzZXI+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxTb2NpYWxVc2VyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIC8vQWZ0ZXIgbG9naW4sIHVzZSBNaWNyb3NvZnQgR3JhcGggQVBJIHRvIGdldCB1c2VyIGluZm9cclxuICAgICAgbGV0IG1lUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICBtZVJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChtZVJlcXVlc3QucmVhZHlTdGF0ZSA9PSA0KSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAobWVSZXF1ZXN0LnN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgICBsZXQgdXNlckluZm8gPSA8TVNHcmFwaFVzZXJJbmZvPkpTT04ucGFyc2UobWVSZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XHJcblxyXG4gICAgICAgICAgICAgIGxldCB1c2VyOiBTb2NpYWxVc2VyID0gbmV3IFNvY2lhbFVzZXIoKTtcclxuICAgICAgICAgICAgICB1c2VyLnByb3ZpZGVyID0gTWljcm9zb2Z0TG9naW5Qcm92aWRlci5QUk9WSURFUl9JRDtcclxuICAgICAgICAgICAgICB1c2VyLmlkID0gbG9naW5SZXNwb25zZS5pZFRva2VuO1xyXG4gICAgICAgICAgICAgIHVzZXIubmFtZSA9IGxvZ2luUmVzcG9uc2UuaWRUb2tlbkNsYWltcy5uYW1lO1xyXG4gICAgICAgICAgICAgIHVzZXIuZW1haWwgPSBsb2dpblJlc3BvbnNlLmFjY291bnQudXNlcm5hbWU7XHJcbiAgICAgICAgICAgICAgdXNlci5pZFRva2VuID0gbG9naW5SZXNwb25zZS5pZFRva2VuO1xyXG4gICAgICAgICAgICAgIHVzZXIucmVzcG9uc2UgPSBsb2dpblJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgIHVzZXIuZmlyc3ROYW1lID0gdXNlckluZm8uZ2l2ZW5OYW1lO1xyXG4gICAgICAgICAgICAgIHVzZXIubGFzdE5hbWUgPSB1c2VySW5mby5zdXJuYW1lO1xyXG5cclxuICAgICAgICAgICAgICByZXNvbHZlKHVzZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlamVjdChgRXJyb3IgcmV0cmlldmluZyB1c2VyIGluZm86ICR7bWVSZXF1ZXN0LnN0YXR1c31gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vTWljcm9zb2Z0IEdyYXBoIE1FIEVuZHBvaW50OiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9ncmFwaC9hcGkvdXNlci1nZXQ/dmlldz1ncmFwaC1yZXN0LTEuMCZ0YWJzPWh0dHBcclxuICAgICAgbWVSZXF1ZXN0Lm9wZW4oJ0dFVCcsICdodHRwczovL2dyYXBoLm1pY3Jvc29mdC5jb20vdjEuMC9tZScpO1xyXG4gICAgICBtZVJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHtsb2dpblJlc3BvbnNlLmFjY2Vzc1Rva2VufWApO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIG1lUmVxdWVzdC5zZW5kKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldExvZ2luU3RhdHVzKCk6IFByb21pc2U8U29jaWFsVXNlcj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNvY2lhbFVzZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgYWNjb3VudHMgPSB0aGlzLl9pbnN0YW5jZS5nZXRBbGxBY2NvdW50cygpO1xyXG4gICAgICBpZiAoYWNjb3VudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB0aGlzLl9pbnN0YW5jZS5zc29TaWxlbnQoe1xyXG4gICAgICAgICAgICBzY29wZXM6IHRoaXMuaW5pdE9wdGlvbnMuc2NvcGVzLFxyXG4gICAgICAgICAgICBsb2dpbkhpbnQ6IGFjY291bnRzWzBdLnVzZXJuYW1lXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihsb2dpblJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmdldFNvY2lhbFVzZXIobG9naW5SZXNwb25zZSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHVzZXIgPT4gcmVzb2x2ZSh1c2VyKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWplY3QoYE5vIHVzZXIgaXMgY3VycmVudGx5IGxvZ2dlZCBpbiB3aXRoICR7TWljcm9zb2Z0TG9naW5Qcm92aWRlci5QUk9WSURFUl9JRH1gKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzaWduSW4oKTogUHJvbWlzZTxTb2NpYWxVc2VyPiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U29jaWFsVXNlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMuX2luc3RhbmNlLmxvZ2luUG9wdXAoe1xyXG4gICAgICAgICAgc2NvcGVzOiB0aGlzLmluaXRPcHRpb25zLnNjb3Blc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbihsb2dpblJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nZXRTb2NpYWxVc2VyKGxvZ2luUmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgLnRoZW4odXNlciA9PiByZXNvbHZlKHVzZXIpKVxyXG4gICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzaWduT3V0KHJldm9rZT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGFjY291bnRzID0gdGhpcy5faW5zdGFuY2UuZ2V0QWxsQWNjb3VudHMoKTtcclxuICAgICAgICAvL1RPRE86IFRoaXMgcmVkaXJlY3RzIHRvIGEgTWljcm9zb2Z0IHBhZ2UsIHRoZW4gc2VuZHMgdXMgYmFjayB0byByZWRpcmVjdF91cmkuLi4gdGhpcyBkb2Vzbid0IHNlZW0gdG8gbWF0Y2ggb3RoZXIgcHJvdmlkZXJzXHJcbiAgICAgICAgLy9PcGVuIGlzc3VlczpcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYWJhY3JpdHQvYW5ndWxhcngtc29jaWFsLWxvZ2luL2lzc3Vlcy8zMDZcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXp1cmVBRC9taWNyb3NvZnQtYXV0aGVudGljYXRpb24tbGlicmFyeS1mb3ItanMvaXNzdWVzLzI1NjNcclxuICAgICAgICB0aGlzLl9pbnN0YW5jZS5sb2dvdXQoe1xyXG4gICAgICAgICAgYWNjb3VudDogYWNjb3VudHNbMF0sXHJcbiAgICAgICAgICBwb3N0TG9nb3V0UmVkaXJlY3RVcmk6IHRoaXMuaW5pdE9wdGlvbnMucmVkaXJlY3RfdXJpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==